<script>hljs.initHighlightingOnLoad();</script>

<h1>${ item.bot.name } Component Bodge</h1>
<h3>${ item.bot.vendor } - ${ item.bot.author }</h3>
<h4>
	<a href="/exchange/${ item.id }/${ item.session_id}">
		<code>${ http_protocol + endpoint }/<br />${ item.id }/<br />${ item.session_id }</code>
	</a>
</h4>
<button id="generate_session">Generate New Session</button>
<button id="clear_session">Clear Session</button>
<hr />
<a href="/exchange">Bot Exchange Network</a>&nbsp;|&nbsp;<a href="/exchange/${ item.id }">${ item.bot.id } | ${ item.instance_id }</a>&nbsp;|&nbsp;<b>session:</b> ${ item.session_id }
<hr />

<h3>Web Socket Client</h3>
<h6><code>${ socket_protocol + endpoint }/<br />${ item.bot.id }/${ item.session_id }</code></h6>
<p>
	The simplest way to connect to a chatbot component is to use websockets.
	Multiple clients can be connected to the same endpoint.
</p>
<ol id="chat_window"></ol>
<div id="chat_controls">
	<input id="user_input" type="text" placeholder="Type something..." />
	<button id="send_btn">send</button>
</div>

<h4>Message Log</h4>
<pre>
<code id="console" class="javascript">
</code>
</pre>

<hr />
<a href="/exchange/${ item.id }">&lt; Back</a>

<script type="text/javascript">
	const ENDPOINT = '${ socket_protocol }' + location.host + '/exchange/${ item.id }/${ item.session_id }';
	const ENTER_KEY = "Enter";

	const CHAT_WINDOW = document.getElementById('chat_window');
	const USER_INPUT = document.getElementById('user_input');
	const SEND_BTN = document.getElementById('send_btn');
	const CONSOLE = document.getElementById('console');

	const GENERATE_BTN = document.getElementById('generate_session');
	const CLEAR_BTN = document.getElementById('clear_session');

	const ws = new WebSocket(ENDPOINT);
	
	let chat = (el, console, log = []) => {
		const create = (type, msg, exchange) => {
			let bubble = document.createElement('li');
			bubble.className = type;

			let label = document.createElement('label');
			label.innerText = type + ':';

			let text = document.createElement('span');
			text.innerText = msg;

			bubble.appendChild(label);
			bubble.appendChild(text);

			if (exchange && exchange.response_time) {
				let time = document.createElement('span');
				time.className = 'time';
				time.innerText += ' (' + exchange.response_time + 's) ';

				bubble.appendChild(time);
			}

			el.appendChild(bubble); 
			el.scrollTop = el.scrollHeight;
		};

		log.forEach(x => create(x.type, x.msg, x.exchange));
		
		return {
			push(type, msg, exchange = {}) {
				log.push({
					type: type,
					msg: msg,
					exchange: exchange
				});
				//localStorage.setItem(ENDPOINT, JSON.stringify(log));
				create(type, msg, exchange);
			},
			send(msg) {
				this.push('user', msg)
			},
			receive(msg, time) {
				this.push('bot', msg, time);
			},
			clear() {
				//localStorage.setItem(ENDPOINT, JSON.stringify([]));
				el.innerHTML = console.innerHTML = '';
			}
		};
	};

	const send_event = e => {
		chat.send(USER_INPUT.value);
		
		ws.send(JSON.stringify({
			user_input: USER_INPUT.value,
			context: {
				timestamp: Date.now()
			}
		}));
		
		USER_INPUT.value = '';
	};

	ws.addEventListener('message', (e, msg = JSON.parse(e.data)) => {
		console.log('Message Received', msg);
		CONSOLE.innerHTML += JSON.stringify(msg, null, 2);
		CONSOLE.innerHTML += "\\n\\n";
		hljs.highlightBlock(CONSOLE);
		if (msg.user_input)
			chat.send(msg.user_input);
		else
			chat.receive(msg.response, msg);
	});

	GENERATE_BTN.addEventListener('click', e => {
		location.href='/exchange/${ item.id }/${ uuid() }';
	}, false);

	CLEAR_BTN.addEventListener('click', e => {
		let req = new XMLHttpRequest();
		req.addEventListener('load', e => {
			chat.clear();

		});
		req.open("DELETE", "/exchange/${ item.id }/${ item.session_id }");
		req.send();
	}, false);

	USER_INPUT.addEventListener('keyup', e => {
		if (e.key === ENTER_KEY) {
			send_event(e);
			return false;
		}
	}, false);

	SEND_BTN.addEventListener('click', send_event, false);

	let req = new XMLHttpRequest();
	req.addEventListener('load', function(e) {
		chat = chat(CHAT_WINDOW, CONSOLE, JSON.parse(this.response).log);
	});
	req.open("GET", "/exchange/${ item.id }/${ item.session_id }/log");
	req.send();
</script>
