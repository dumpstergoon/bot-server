<script>hljs.initHighlightingOnLoad();</script>

<h1>${ item.bot.name } Component</h1>
<h3>${ item.bot.vendor } - ${ item.bot.author }</h3>
<hr />
<a href="/exchange">&lt; Bot Exchange Network (B.E.N) Listing</a>&nbsp;|&nbsp;<b>${ item.bot.id } v${ item.bot.version }</b>&nbsp;|&nbsp;${ item.instance_id }
<hr />

<p>
	${ item.bot.description }
</p>

<menu>
	<li><a href="#endpoints">Bot Component API Endpoints</a></li>
	<li><a href="#api">API Request/Response Schema</a></li>
	<li><a href="#custom-responses">Custom Chat Responses</a></li>
</menu>

<br />

<h3>Supported Languages</h3>
<ul>
	${ iterate(item.bot.languages, "bot-details/bot-language-item") }
</ul>
<br />

<hr />

<h3><a name="endpoints" href="#endpoints">Bot Component Endpoints</a></h3>
	<h2>RESTful over ${ http_protocol.toUpperCase() }</h2>
	<p>
		Simple request/response endpoint. The <code>session_id</code> is to be
		generated by the client.
	</p>
	<h5><code>${ http_protocol + endpoint }/${ item.id }</code></h5>
	<table>
		<tbody>
			<tr>
				<td class="property"><code>GET</code></td>
				<td class="description">
					This <a href="//${ endpoint }/${ item.id }">very page </a>you are looking at. Gives you all the juicy details.
				</td>
			</tr>
			<tr>
				<td class="property"><code>PUT</code></td>
				<td class="description">
					Upload <em>custom responses</em> by sending <code>JSON</code> in the body of the
					request. The schema for the <code>JSON</code> object is <a href="#custom-responses">defined below</a>.
					<br /><br />
					This endpoint returns a generated <em>proxy bot id</em>.
					<br /><br />
					When using this approach, a <em>proxy component</em> uri will be created using the generated <em>proxy bot id</em> like so:
					<br /><br />
					<code>${ http_protocol + endpoint }/${ item.id }_${ uuid() }</code>
					<br /><br />
				</td>
			</tr>
		</tbody>
	</table>
	<h5><code>${ http_protocol + endpoint }/${ item.id }/&lt;session_id&gt;</code></h5>
	<table>
		<tbody>
			<tr>
				<td class="property"><code>GET</code></td>
				<td class="description">
					A bodge for testing the ${ item.bot.name } component in the browser.<br /><br />
					<button onclick="location.href='/exchange/${ item.id }/${ uuid() }'">Generate New Session</button>
				</td>
			</tr>
			<tr>
				<td class="property"><code>POST</code></td>
				<td class="description">
					The endpoint for <em>exchange requests</em>. The <code>POST</code> body
					is to contain <code>JSON</code> which is <a href="#api">defined below</a>.
				</td>
			</tr>
			<tr>
				<td class="property"><code>PUT</code></td>
				<td class="description">
					Upload <em>custom responses</em> by sending <code>JSON</code> in the body of the
					request. The schema for the <code>JSON</code> object is <a href="#custom-responses">defined below</a>.
				</td>
			</tr>
		</tbody>
	</table>

	<h2>${ secure('Secure ') }Web Socket</h2>
	<p>
		Asynchronous endpoint for easier distribution of messages to
		multiple clients (perhaps in group conversions).
	</p>
	<h5><code>${ socket_protocol + endpoint }/${ item.id }/&lt;session_id&gt;</code></h5>
	<br />

	<h2>IPC (Internal Use Only)</h2>
	<p>
		Endpoint of the component's parallel process in the server environment.
	</p>
	<h5><code>${ item.bot.uri }</code></h5>
<br />
<hr />

<h2><a name="api" href="#api">Bot Component Endpoint API</a></h2>
${ render("bot-details/request-schema", item.bot.schema.request) }
${ render("bot-details/response-schema", item.bot.schema.response) }

<h3><a href="#custom-responses" name="custom-responses">Custom Responses</a></h3>
<p>
	Using a <code>PUT</code> request at
	<code>${ http_protocol + endpoint }/${ item.id }/&lt;session_id&gt;</code>,
	you can save your custom responses and the component will use these responses instead.
</p>
<pre>
<code class="javascript">
const request = require('request');
request({
  url: "${http_protocol + endpoint }/\\
    ${ item.id }/${ uuid() }",
  method: 'PUT',
  json: {
    "index": [
      "Hello, World.",
      <b>⋮</b>
      "Good [time_of_day], human."
    ],
    <b>⋮</b>
    "exit": [
      "Goodbye, World.",
      <b>⋮</b>
      "Have a pleasant [time_of_day], human."
    ]
  },
}, (e, r, b) => {
  if (e) {
    return; // Do some error stuff
  }
  console.log('Responses saved.');
});
</code>
</pre>
<p>
	Like in the example above, send a <em>dictionary</em> whose keys are the names
	of the actions you wish to customise. Their corresponding value is an array of
	possible text responses.
</p>

<h4>Bot Actions</h4>
<table>
	<thead>
		<tr>
			<th class="property">Action</th>
			<th class="description" colspan="2">Default Responses</th>
		</tr>
	</thead>
	<tbody>
		${ iterate(item.bot.responses, "bot-details/bot-action-details") }
	</tbody>
</table>

${ render("schema/object-detail", item.bot.schema.response_variables) }

<br />

<hr />

<a href="/exchange">&lt; Back</a>
