#!/usr/bin/env node
// @ts-nocheck
'use strict';

const ømq = require("zeromq");
const registry = {};

async function index() {
	const socket = new ømq.Reply;
	await socket.bind("tcp://*:6789");
	
	while (true) {
		// We wait for a bot to announce its presence
		let [bot] = JSON.parse(await socket.receive());
		// We use the bot's name to store its service info
		registry[bot.name] = {
			name: bot.name,
			uri: bot.uri
		};
		
		// Great. Now, we respond to the bot to say the registration
		// was successful.
		await socket.send(":)");
	}
};

index();

let thing = {
	actions: {
		title: "Actions List",
		description: "List of actions of their default responses",
		type: "array",
		items: {
			type: "object",
			properties: {
				name: {
					type: "string",
				},
				responses: {
					type: "array",
					items: {
						type: "string"
					}
				}
			}
		},
	},
	values: {
		title: "Response Template Values",
		description: "List of available render values.",
		type: "array",
		items: {
			type: "object",
			properties: {
				name: {
					type: "string"
				},
				description: {

				},
				type: {
					type: "string"
				}
			}
		}
	},
	request: {
		title: "Exchange Body",
		description: "Structure to be sent with each request.",
		type: "object",
		properties: {
			user_input: {
				description: "Message sent to bot by the user.",
				type: "string"
			},
			context: {
				description: "\
					Data used by the bot to determine appropriate responses.\
					Only needs to be sent on the first request.",
				type: "object",
				properties: {
					passphrase: {
						description: "A secret passphrase used to test a user's identity. Passphrase should be between 6 and 12 characters long but the only real limit is a minimum of 3 characters.",
						type: "string",
						minLength: 3
					},
					max_attempts: {
						description: "Optional. Number of failed password attempts before the bot finishes and reports it has failed. Defaults to 3.",
						type: "integer"
					},
					// These latter properties are defaults.
					user: {
						description: "Simple user object.",
						type: ["object", null],
						properties: {
							title: {
								description: "Mr|Dr|Ms|etc...",
								type: "string"
							},
							firstName: {
								type: "string"
							},
							lastName: {
								type: "string"
							}
						},
						required: ['title', 'firstName', 'lastName']
					},
					datetime: {
						description: "\
							Optional. Provide context for the time of day.\
							Can be used in responses like so: \"Good [time_of_day]!\"\
							Where [time_of_day] has the values 'morning', 'afternoon',\
							and 'evening' depending on the time provided. Defaults to\
							current UTC time.",
						type: ["date", null]
					},
					responses: {
						description: "Optional. Customise how the bot responds\
							to each action in the component.",
						type: ["object", null],
					}
				},
				required: ['passphrase']
			},
		},
		required: ['user_input', 'context']
	},
	response: {
		title: "Exchange Response",
		description: "Response and data sent back by the bot.",
		type: "object",
		properties: {
			response: {
				description: "Text response from bot component.",
				type: "string"
			},
			confidence: {
				description: "The confidence that this is the appropriate response. Value lies between 0 and 1.",
				type: "number",
				minimum: 0,
				maximum: 1,
			},
			out_of_context: {
				description: "\
					This is true if the bot receives input it feels was out of context.\
					The bot has the ability to handle this but you might want to use\
					this opportunity to intercept and do something else in your bot.",
				type: "boolean"
			},
			idontknow: {
				description: "\
					This is true if the bot did not understand the user input.\
					The bot has the ability to handle this (eg re-phrasing a question or instruction).\
					However, you might wish to try and understand the input yourself and either switch\
					to another component or append a reply to what this component will say next.",
				type: "boolean"
			},
			component_failed: {
				type: "boolean"
			},
			component_done: {
				type: "boolean"
			},
			updated_context: {
				description: "Any updated or new data from the bot.",
				type: "object",
				properties: {
					action_name: {
						description: "The name of the action that was performed.",
						type: "string"
					}
				},
			}
		}
	}
}
